openapi: 3.0.3
info:
  title: Testplan API
  version: 1.0.0
  description: API for managing test plans and related resources.
paths:
  /api/v1/testplans/:
    get:
      operationId: listTestplans
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: status
        schema:
          type: string
          enum:
          - completed
          - in_progress
          - not_started
        description: |-
          * `not_started` - Not Started
          * `in_progress` - In Progress
          * `completed` - Completed
      - in: query
        name: title
        schema:
          type: string
      tags:
      - testplans
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTestPlanList'
          description: ''
    post:
      operationId: createTestplans
      tags:
      - testplans
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestPlanCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TestPlanCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TestPlanCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestPlanCreate'
          description: ''
  /api/v1/testplans/{id}/:
    get:
      operationId: retrieveTestplans
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this test plan.
        required: true
      tags:
      - testplans
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestPlan'
          description: ''
    put:
      operationId: updateTestplans
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this test plan.
        required: true
      tags:
      - testplans
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestPlan'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TestPlan'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TestPlan'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestPlan'
          description: ''
    patch:
      operationId: partialUpdateTestplans
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this test plan.
        required: true
      tags:
      - testplans
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTestPlan'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTestPlan'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTestPlan'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestPlan'
          description: ''
    delete:
      operationId: destroyTestplans
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this test plan.
        required: true
      tags:
      - testplans
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/testplans/{testPlanId}/testcases/:
    get:
      operationId: listTestplansTestcases
      parameters:
      - in: query
        name: latest_result
        schema:
          type: string
          enum:
          - fail
          - in_progress
          - pass
        description: |-
          * `pass` - Pass
          * `fail` - Fail
          * `in_progress` - In Progress
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: status
        schema:
          type: string
          enum:
          - closed
          - design
          - ready
        description: |-
          * `design` - Design
          * `ready` - Ready
          * `closed` - Closed
      - in: path
        name: testPlanId
        schema:
          type: integer
        required: true
      - in: query
        name: title
        schema:
          type: string
      tags:
      - testplans
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTestCaseList'
          description: ''
    post:
      operationId: createTestplansTestcases
      parameters:
      - in: path
        name: testPlanId
        schema:
          type: integer
        required: true
      tags:
      - testplans
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCase'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TestCase'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TestCase'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestCase'
          description: ''
  /api/v1/testplans/{testPlanId}/testcases/{id}/:
    get:
      operationId: retrieveTestplansTestcases
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: testPlanId
        schema:
          type: integer
        required: true
      tags:
      - testplans
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestCase'
          description: ''
    put:
      operationId: updateTestplansTestcases
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: testPlanId
        schema:
          type: integer
        required: true
      tags:
      - testplans
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCase'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TestCase'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TestCase'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestCase'
          description: ''
    patch:
      operationId: partialUpdateTestplansTestcases
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: testPlanId
        schema:
          type: integer
        required: true
      tags:
      - testplans
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTestCase'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTestCase'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTestCase'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestCase'
          description: ''
    delete:
      operationId: destroyTestplansTestcases
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: testPlanId
        schema:
          type: integer
        required: true
      tags:
      - testplans
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/testplans/{testPlanId}/testcases/{testCaseId}/testresults/:
    get:
      operationId: listTestplansTestcasesTestresults
      parameters:
      - in: query
        name: case
        schema:
          type: string
      - in: query
        name: configuration
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: result
        schema:
          type: string
          enum:
          - fail
          - in_progress
          - pass
        description: |-
          * `pass` - Pass
          * `fail` - Fail
          * `in_progress` - In Progress
      - in: path
        name: testCaseId
        schema:
          type: integer
        required: true
      - in: path
        name: testPlanId
        schema:
          type: integer
        required: true
      - in: query
        name: tester
        schema:
          type: string
      tags:
      - testplans
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTestResultList'
          description: ''
    post:
      operationId: createTestplansTestcasesTestresults
      parameters:
      - in: path
        name: testCaseId
        schema:
          type: integer
        required: true
      - in: path
        name: testPlanId
        schema:
          type: integer
        required: true
      tags:
      - testplans
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestResultCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TestResultCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TestResultCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestResultCreate'
          description: ''
  /api/v1/testplans/{testPlanId}/testcases/{testCaseId}/testresults/{id}/:
    get:
      operationId: retrieveTestplansTestcasesTestresults
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: testCaseId
        schema:
          type: integer
        required: true
      - in: path
        name: testPlanId
        schema:
          type: integer
        required: true
      tags:
      - testplans
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestResult'
          description: ''
    put:
      operationId: updateTestplansTestcasesTestresults
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: testCaseId
        schema:
          type: integer
        required: true
      - in: path
        name: testPlanId
        schema:
          type: integer
        required: true
      tags:
      - testplans
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestResult'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TestResult'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TestResult'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestResult'
          description: ''
    patch:
      operationId: partialUpdateTestplansTestcasesTestresults
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: testCaseId
        schema:
          type: integer
        required: true
      - in: path
        name: testPlanId
        schema:
          type: integer
        required: true
      tags:
      - testplans
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTestResult'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTestResult'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTestResult'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestResult'
          description: ''
    delete:
      operationId: destroyTestplansTestcasesTestresults
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: testCaseId
        schema:
          type: integer
        required: true
      - in: path
        name: testPlanId
        schema:
          type: integer
        required: true
      tags:
      - testplans
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/testplans/{testPlanId}/testcases/{testCaseId}/testresults/{testResultId}/testresultstepattachments/:
    get:
      operationId: listTestplansTestcasesTestresultsTestresultstepattachments
      parameters:
      - in: path
        name: testCaseId
        schema:
          type: integer
        required: true
      - in: path
        name: testPlanId
        schema:
          type: integer
        required: true
      - in: path
        name: testResultId
        schema:
          type: integer
        required: true
      tags:
      - testplans
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestResultStepAttachment'
          description: ''
    post:
      operationId: createTestplansTestcasesTestresultsTestresultstepattachments
      description: Create multiple test result step attachments at once. Replaces
        all existing attachments for the given test result. Expects an array of test
        result step attachment objects in the request data.
      parameters:
      - in: path
        name: testCaseId
        schema:
          type: integer
        required: true
      - in: path
        name: testPlanId
        schema:
          type: integer
        required: true
      - in: path
        name: testResultId
        schema:
          type: integer
        required: true
      tags:
      - testplans
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: array
              items:
                type: object
                properties:
                  result_step:
                    type: integer
                    description: ID of the test result step
                  file:
                    type: string
                    format: binary
                    description: File to attach
                required:
                - result_step
                - file
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestResultStepAttachment'
          description: ''
  /api/v1/testplans/{testPlanId}/testcases/{testCaseId}/testresults/{testResultId}/testresultstepattachments/{id}/download/:
    get:
      operationId: retrieveTestplansTestcasesTestresultsTestresultstepattachmentsDownload
      description: Download the attachment file through Django proxy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: testCaseId
        schema:
          type: integer
        required: true
      - in: path
        name: testPlanId
        schema:
          type: integer
        required: true
      - in: path
        name: testResultId
        schema:
          type: integer
        required: true
      tags:
      - testplans
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
                format: binary
                description: The file content
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
          description: ''
  /api/v1/testplans/{testPlanId}/testcases/{testCaseId}/testresults/{testResultId}/testresultsteps/:
    get:
      operationId: listTestplansTestcasesTestresultsTestresultsteps
      parameters:
      - in: path
        name: testCaseId
        schema:
          type: integer
        required: true
      - in: path
        name: testPlanId
        schema:
          type: integer
        required: true
      - in: path
        name: testResultId
        schema:
          type: integer
        required: true
      tags:
      - testplans
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestResultStep'
          description: ''
    post:
      operationId: createTestplansTestcasesTestresultsTestresultsteps
      description: Create multiple test result steps at once. Replaces all existing
        test result steps for the given test result. Expects an array of test result
        step objects in the request data.
      parameters:
      - in: path
        name: testCaseId
        schema:
          type: integer
        required: true
      - in: path
        name: testPlanId
        schema:
          type: integer
        required: true
      - in: path
        name: testResultId
        schema:
          type: integer
        required: true
      tags:
      - testplans
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  step:
                    type: integer
                    nullable: true
                  order:
                    type: integer
                    minimum: 0
                    format: int64
                  action:
                    type: string
                  expected_result:
                    type: string
                  status:
                    type: string
                    enum:
                    - pass
                    - fail
                    - skip
                  comment:
                    type: string
                required:
                - order
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestResultStep'
          description: ''
  /api/v1/testplans/{testPlanId}/testcases/{testCaseId}/teststepattachments/:
    get:
      operationId: listTestplansTestcasesTeststepattachments
      parameters:
      - in: path
        name: testCaseId
        schema:
          type: integer
        required: true
      - in: path
        name: testPlanId
        schema:
          type: integer
        required: true
      tags:
      - testplans
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestStepAttachment'
          description: ''
    post:
      operationId: createTestplansTestcasesTeststepattachments
      description: Create multiple test step attachments at once. Replaces all existing
        attachments for the given test case. Expects an array of test step attachment
        objects in the request data.
      parameters:
      - in: path
        name: testCaseId
        schema:
          type: integer
        required: true
      - in: path
        name: testPlanId
        schema:
          type: integer
        required: true
      tags:
      - testplans
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: array
              items:
                type: object
                properties:
                  step:
                    type: integer
                    description: ID of the test step
                  file:
                    type: string
                    format: binary
                    description: File to attach
                required:
                - step
                - file
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestStepAttachment'
          description: ''
  /api/v1/testplans/{testPlanId}/testcases/{testCaseId}/teststepattachments/{id}/download/:
    get:
      operationId: retrieveTestplansTestcasesTeststepattachmentsDownload
      description: Download the attachment file through Django proxy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: testCaseId
        schema:
          type: integer
        required: true
      - in: path
        name: testPlanId
        schema:
          type: integer
        required: true
      tags:
      - testplans
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
                format: binary
                description: The file content
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
          description: ''
  /api/v1/testplans/{testPlanId}/testcases/{testCaseId}/teststeps/:
    get:
      operationId: listTestplansTestcasesTeststeps
      parameters:
      - in: path
        name: testCaseId
        schema:
          type: integer
        required: true
      - in: path
        name: testPlanId
        schema:
          type: integer
        required: true
      tags:
      - testplans
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestStep'
          description: ''
    post:
      operationId: createTestplansTestcasesTeststeps
      description: Create multiple test steps at once. Replaces all existing test
        steps for the given test case. Expects an array of test step objects in the
        request data.
      parameters:
      - in: path
        name: testCaseId
        schema:
          type: integer
        required: true
      - in: path
        name: testPlanId
        schema:
          type: integer
        required: true
      tags:
      - testplans
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  order:
                    type: integer
                    minimum: 0
                    format: int64
                  action:
                    type: string
                  expected_result:
                    type: string
                required:
                - order
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestStep'
          description: ''
  /api/v1/testplans/{testPlanId}/testresults/:
    get:
      operationId: listTestplansTestresults
      parameters:
      - in: query
        name: case
        schema:
          type: string
      - in: query
        name: configuration
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: result
        schema:
          type: string
          enum:
          - fail
          - in_progress
          - pass
        description: |-
          * `pass` - Pass
          * `fail` - Fail
          * `in_progress` - In Progress
      - in: path
        name: testPlanId
        schema:
          type: integer
        required: true
      - in: query
        name: tester
        schema:
          type: string
      tags:
      - testplans
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTestResultList'
          description: ''
  /api/v1/token:
    post:
      operationId: createToken
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/v1/token/refresh:
    post:
      operationId: createTokenRefresh
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/v1/users/:
    get:
      operationId: listUsers
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
  /api/v1/users/me/:
    get:
      operationId: retrieveUsersMe
      description: Get the current authenticated user
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
components:
  schemas:
    BrowserEnum:
      enum:
      - chrome
      - firefox
      - safari
      - edge
      - opera
      type: string
      description: |-
        * `chrome` - Chrome
        * `firefox` - Firefox
        * `safari` - Safari
        * `edge` - Edge
        * `opera` - Opera
    OsEnum:
      enum:
      - windows10
      - windows11
      - macos
      - linux
      - android
      - ios
      type: string
      description: |-
        * `windows10` - Windows 10
        * `windows11` - Windows 11
        * `macos` - macOS
        * `linux` - Linux
        * `android` - Android
        * `ios` - iOS
    PaginatedTestCaseList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/TestCase'
    PaginatedTestPlanList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/TestPlan'
    PaginatedTestResultList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/TestResult'
    PatchedTestCase:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        executed_at:
          type: string
          format: date-time
          readOnly: true
        latest_result:
          type: string
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
        status:
          $ref: '#/components/schemas/TestCaseStatusEnum'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        plan:
          type: integer
    PatchedTestPlan:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
        status:
          $ref: '#/components/schemas/TestPlanStatusEnum'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedTestResult:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        case:
          type: integer
        case_title:
          type: string
          readOnly: true
        result:
          $ref: '#/components/schemas/ResultEnum'
        configuration:
          type: string
          readOnly: true
        tester:
          type: integer
        tester_username:
          type: string
          readOnly: true
        executed_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    ResultEnum:
      enum:
      - pass
      - fail
      - in_progress
      type: string
      description: |-
        * `pass` - Pass
        * `fail` - Fail
        * `in_progress` - In Progress
    TestCase:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        executed_at:
          type: string
          format: date-time
          readOnly: true
        latest_result:
          type: string
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
        status:
          $ref: '#/components/schemas/TestCaseStatusEnum'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        plan:
          type: integer
      required:
      - created_at
      - executed_at
      - id
      - latest_result
      - plan
      - title
      - updated_at
    TestCaseStatusEnum:
      enum:
      - design
      - ready
      - closed
      type: string
      description: |-
        * `design` - Design
        * `ready` - Ready
        * `closed` - Closed
    TestPlan:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
        status:
          $ref: '#/components/schemas/TestPlanStatusEnum'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - title
      - updated_at
    TestPlanCreate:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
      required:
      - title
    TestPlanStatusEnum:
      enum:
      - not_started
      - in_progress
      - completed
      type: string
      description: |-
        * `not_started` - Not Started
        * `in_progress` - In Progress
        * `completed` - Completed
    TestResult:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        case:
          type: integer
        case_title:
          type: string
          readOnly: true
        result:
          $ref: '#/components/schemas/ResultEnum'
        configuration:
          type: string
          readOnly: true
        tester:
          type: integer
        tester_username:
          type: string
          readOnly: true
        executed_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - case
      - case_title
      - configuration
      - executed_at
      - id
      - tester
      - tester_username
      - updated_at
    TestResultCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        case:
          type: integer
        result:
          $ref: '#/components/schemas/ResultEnum'
        browser:
          $ref: '#/components/schemas/BrowserEnum'
        os:
          $ref: '#/components/schemas/OsEnum'
        tester:
          type: integer
      required:
      - case
      - id
      - tester
    TestResultStep:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        result:
          type: integer
        step:
          type: integer
          nullable: true
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        action:
          type: string
        expected_result:
          type: string
        status:
          $ref: '#/components/schemas/TestResultStepStatusEnum'
        comment:
          type: string
      required:
      - id
      - order
      - result
    TestResultStepAttachment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        result_step:
          type: integer
        file:
          type: string
          format: uri
      required:
      - file
      - id
      - result_step
    TestResultStepStatusEnum:
      enum:
      - pass
      - fail
      - skip
      type: string
      description: |-
        * `pass` - Pass
        * `fail` - Fail
        * `skip` - Skip
    TestStep:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        case:
          type: integer
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        action:
          type: string
        expected_result:
          type: string
      required:
      - case
      - id
      - order
    TestStepAttachment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        step:
          type: integer
        file:
          type: string
          format: uri
      required:
      - file
      - id
      - step
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        first_name:
          type: string
          readOnly: true
        last_name:
          type: string
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
      required:
      - email
      - first_name
      - id
      - last_name
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
