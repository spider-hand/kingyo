/* tslint:disable */
/* eslint-disable */
/**
 * Testplan API
 * API for managing test plans and related resources.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedTestPlanList,
  TestPlan,
} from '../models/index';
import {
    PaginatedTestPlanListFromJSON,
    PaginatedTestPlanListToJSON,
    TestPlanFromJSON,
    TestPlanToJSON,
} from '../models/index';

export interface ListTestplansRequest {
    page?: number;
    pageSize?: number;
}

export interface RetrieveTestplansRequest {
    id: number;
}

/**
 * 
 */
export class TestplansApi extends runtime.BaseAPI {

    /**
     */
    async listTestplansRaw(requestParameters: ListTestplansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedTestPlanList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v1/testplans/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedTestPlanListFromJSON(jsonValue));
    }

    /**
     */
    async listTestplans(requestParameters: ListTestplansRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedTestPlanList> {
        const response = await this.listTestplansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async retrieveTestplansRaw(requestParameters: RetrieveTestplansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestPlan>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling retrieveTestplans().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/v1/testplans/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TestPlanFromJSON(jsonValue));
    }

    /**
     */
    async retrieveTestplans(requestParameters: RetrieveTestplansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestPlan> {
        const response = await this.retrieveTestplansRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
