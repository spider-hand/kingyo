/* tslint:disable */
/* eslint-disable */
/**
 * Testplan API
 * API for managing test plans and related resources.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedTestPlanList,
  PatchedTestPlan,
  TestPlan,
  TestPlanCreate,
} from '../models/index';
import {
    PaginatedTestPlanListFromJSON,
    PaginatedTestPlanListToJSON,
    PatchedTestPlanFromJSON,
    PatchedTestPlanToJSON,
    TestPlanFromJSON,
    TestPlanToJSON,
    TestPlanCreateFromJSON,
    TestPlanCreateToJSON,
} from '../models/index';

export interface CreateTestplansRequest {
    testPlanCreate: TestPlanCreate;
}

export interface DestroyTestplansRequest {
    id: number;
}

export interface ListTestplansRequest {
    page?: number;
    pageSize?: number;
    status?: ListTestplansStatusEnum;
    title?: string;
}

export interface PartialUpdateTestplansRequest {
    id: number;
    patchedTestPlan?: Omit<PatchedTestPlan, 'id'|'created_at'|'updated_at'>;
}

export interface RetrieveTestplansRequest {
    id: number;
}

export interface UpdateTestplansRequest {
    id: number;
    testPlan: Omit<TestPlan, 'id'|'created_at'|'updated_at'>;
}

/**
 * 
 */
export class TestplansApi extends runtime.BaseAPI {

    /**
     */
    async createTestplansRaw(requestParameters: CreateTestplansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestPlanCreate>> {
        if (requestParameters['testPlanCreate'] == null) {
            throw new runtime.RequiredError(
                'testPlanCreate',
                'Required parameter "testPlanCreate" was null or undefined when calling createTestplans().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/testplans/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TestPlanCreateToJSON(requestParameters['testPlanCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TestPlanCreateFromJSON(jsonValue));
    }

    /**
     */
    async createTestplans(requestParameters: CreateTestplansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestPlanCreate> {
        const response = await this.createTestplansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async destroyTestplansRaw(requestParameters: DestroyTestplansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling destroyTestplans().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/testplans/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyTestplans(requestParameters: DestroyTestplansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.destroyTestplansRaw(requestParameters, initOverrides);
    }

    /**
     */
    async listTestplansRaw(requestParameters: ListTestplansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedTestPlanList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/testplans/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedTestPlanListFromJSON(jsonValue));
    }

    /**
     */
    async listTestplans(requestParameters: ListTestplansRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedTestPlanList> {
        const response = await this.listTestplansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async partialUpdateTestplansRaw(requestParameters: PartialUpdateTestplansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestPlan>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling partialUpdateTestplans().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/testplans/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedTestPlanToJSON(requestParameters['patchedTestPlan']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TestPlanFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateTestplans(requestParameters: PartialUpdateTestplansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestPlan> {
        const response = await this.partialUpdateTestplansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async retrieveTestplansRaw(requestParameters: RetrieveTestplansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestPlan>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling retrieveTestplans().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/testplans/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TestPlanFromJSON(jsonValue));
    }

    /**
     */
    async retrieveTestplans(requestParameters: RetrieveTestplansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestPlan> {
        const response = await this.retrieveTestplansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateTestplansRaw(requestParameters: UpdateTestplansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestPlan>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateTestplans().'
            );
        }

        if (requestParameters['testPlan'] == null) {
            throw new runtime.RequiredError(
                'testPlan',
                'Required parameter "testPlan" was null or undefined when calling updateTestplans().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/testplans/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TestPlanToJSON(requestParameters['testPlan']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TestPlanFromJSON(jsonValue));
    }

    /**
     */
    async updateTestplans(requestParameters: UpdateTestplansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestPlan> {
        const response = await this.updateTestplansRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListTestplansStatusEnum = {
    Completed: 'completed',
    InProgress: 'in_progress',
    NotStarted: 'not_started'
} as const;
export type ListTestplansStatusEnum = typeof ListTestplansStatusEnum[keyof typeof ListTestplansStatusEnum];
